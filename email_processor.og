package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/mail"
	"database/sql"
//	"encoding/json"
	_ "github.com/mattn/go-sqlite3"
  "os"
  "path"
  "io/ioutil"
  "time"
)

type EmailProcessor interface {
	Add(acct *IMAPAccount, mbox_name string, uid uint32, flags Flags, msg *mail.Message) (err error)
  SparseEmailListUnified(search string, start, sort int) (el *SparseEmailList)
}

type SqliteEmailProcessor struct {
  folder string
  contactService ContactService
  conns map[string]*sql.DB
}

func NewSqliteEmailProcessor(folder string, cs ContactService) (s *SqliteEmailProcessor) {
  // if folder doesn't exist, create it
  // then open up the metadata file in it, or create if it doesn't exist 
  // the metadata folder will store 
  os.MkdirAll(folder, 0700)
  s = &SqliteEmailProcessor{folder: folder, contactService: cs}
  return
}

func (s *SqliteEmailProcessor) getIndexFor(mbox_name string) (db *sql.DB){
  folder := path.Join(s.folder, "index")
  os.MkdirAll(folder, 0700)
  filename := path.Join(folder, "index")

  if s.conns  == nil {
    s.conns = make(map[string]*sql.DB, 10)
  }
  db, present := s.conns[filename]
	if !present {
    db, _ = sql.Open("sqlite3", filename)
    _, err := db.Exec("CREATE VIRTUAL TABLE IF NOT EXISTS uids USING fts4" +
      " (pk INTEGER PRIMARY KEY, uid INTEGER, deleted INTEGER, flags TEXT, " +
      "  subject TEXT, frm_em TEXT, cc TEXT, to_em TEXT, deliver_date integer, account varchar(256), mbox TEXT" +
      " ); ")
    _, err = db.Exec("create index idx_uid_key on uids(uid)")
    if err != nil {
      log.Printf("\n\nError creating table: %v \n\n", err)
    }
  }
  if db != nil {
    s.conns[filename] = db
  }

  return
}

func (s *SqliteEmailProcessor) addToIndex(acct *IMAPAccount, mbox_name , subject, from, cc, to string, date int64, flags Flags, uid uint32) (err error){
  idx := s.getIndexFor(mbox_name)

  log.Printf("\n\tInserting uid: %v  flags: %v", uid, flags, subject, from, cc, to,date, mbox_name, acct.Username)
	cmd := "insert into uids(uid, deleted, flags, subject, frm_em, cc, to_em, deliver_date, mbox, account) " +
		" VALUES (?,?,?,?,?,?,?,?,?,?) "
    flag_json, _ := json.Marshal(flags)
	_, err = idx.Exec(cmd, uid, 0, string(flag_json), subject, from, cc, to, date, mbox_name, acct.Username)
  if err != nil {
    log.Printf("Error inserting uid %v for mailbox [%v]. \n\tError: %v", uid, mbox_name, err)
  }
  return
}

func (s *SqliteEmailProcessor) Add(acct *IMAPAccount, mbox_name string, uid uint32,flags Flags, msg *mail.Message) (err error){
  folder := path.Join(s.folder, "emails", mbox_name)
  os.MkdirAll(folder, 0700)

  file := path.Join(folder, fmt.Sprintf("%d", uid))

  log.Printf("Writing %v to file: %v", uid, file)



	var msgdata = map[string]string{}

	for headerkey := range msg.Header {
	  val := msg.Header.Get(headerkey)
	  msgdata[headerkey] = val
	}
  date_time, err := msg.Header.Date()
  var date_timestamp int64 = -1
  if err == nil {
    date_timestamp = date_time.Unix() 
  }

	msgdata["imap_uid"] = fmt.Sprintf("%d", uid)
	   if b, err := TextBody(msg); err == nil {
	     msgdata["text_body"] = b
	   }
	   if b, err := HTMLBody(msg); err == nil {
	     msgdata["html_body"] = b
	   }
	o, err := json.Marshal(msgdata)
	if err != nil {
		log.Println("error marshaling message as JSON: ", err.Error()[:100])
    ioutil.WriteFile(file+".ERR", []byte(fmt.Sprintf("Error decoding message body: %v\nout: %v", err.Error(), o)), 0700)
	} else {
    ioutil.WriteFile(file, o, 0700)
	}

  //func (s *SqliteEmailProcessor) addToIndex(acct *IMAPAccount, mbox_name string, subject, from, cc, to, flags Flags, uid uint32) (err error){
  subject := msgdata["Subject"]
  from := msgdata["From"]
  cc := msgdata["Cc"]
  to := msgdata["To"]


  for _, k:= range [5]string { "From", "Cc", "To", "Bcc"}{
    addresses, err := msg.Header.AddressList(k)
    if err == nil {
      for _, a := range addresses {
        log.Printf("Adding [%v] under [%v]", a, k)
        s.contactService.Add(a.Name, a.Address)
      }
    }
  }

  s.addToIndex(acct, mbox_name, subject, from, cc, to, date_timestamp, flags, uid)

  return nil
}

func parseDate(in string) (ts int64) {
  t, err := time.Parse("Mon, 02 Jan 2006 15:04:05 -0700", in)
  if err != nil {
    log.Printf("Start date: [%v]  Timestamp:[%v] String():[%v]", in, t.Unix() ,t.String())
    return t.Unix()
  }
  return -1
}

type PrintingEmailProcessor struct {
	MetadataService MetadataService
}

func (p *PrintingEmailProcessor) Add(account *IMAPAccount, mbox_name string, uid uint32, flags string, msg *mail.Message) (err error) {
	var msgdata = map[string]string{}

  log.Printf("FLAGS: %v", flags)
	/*for headerkey := range msg.Header {
	  val := msg.Header.Get(headerkey)
	  msgdata[headerkey] = val
	}*/

	msgdata["imap_uid"] = fmt.Sprintf("%d", uid)
	/*
	   if b, err := TextBody(msg); err == nil {
	     msgdata["text_body"] = b
	   }
	   if b, err := HTMLBody(msg); err == nil {
	     msgdata["html_body"] = b
	   }
	*/
	o, err := json.Marshal(msgdata)
	if err != nil {
		log.Println("error marshaling message as JSON: ", err.Error()[:100])
	} else {
		fmt.Println(string(o))
	}
	return nil
}


func (s *SqliteEmailProcessor) SparseEmailListUnified(search string, start, sort int) (el *SparseEmailList){
  /// TODO: MAKE THIS WORK NEXT>

  idx := s.getIndexFor(mbox_name)
  res = make(map[string]SparseEmailList, 50)
  cmd := ""

	stmt, _ := s.db.Prepare(cmd)
	defer stmt.Close()
	var id int64
	var flags []byte
	var perm_flags []byte
  rows, err := stmt.Query()
  switch {
    case err == sql.ErrNoRows:
      log.Printf("No rows returned.")
      return
    case err != nil:
      log.Printf("\n\nError querying db: %v\n\n", err)
      return
  }

  defer rows.Close()
  for rows.Next() {
    var status MboxStatus
    var email string

    err = rows.Scan(&id, &(status.Name), &flags, &perm_flags, &(status.Messages), &(status.Recent), &(status.Unseen), &(status.UIDNext), &(status.UIDValidity), &email)
    if err != nil {
      log.Printf("Error scanning row.")
      err = nil
    }
    
    err = json.Unmarshal(flags, &(status.Flags))
    if err != nil {
      log.Printf("Error unmarshalling: %v to Flags", string(flags))
      err = nil
    }
    err = json.Unmarshal(perm_flags, &(status.PermFlags))
    if err != nil {
      log.Printf("Error unmarshalling: %v to Flags", string(perm_flags))
      err = nil
    }
    
    log.Printf("loaded mbox: %v", status)

    // add it to the map
    //  first, check to see if the map has teh account.
    //  if so, add to it, otherwise create a new key etcs
    if _, ok := res[email]; !ok {
      res[email] = make(MboxSet, 10)
    }
    res[email][status.Name] = status
  }
  */
  return nil
}
